name: "ShellCheck"
author: "Cloudfy9 <contact@cloudfy9.com>"
description: "GitHub action for ShellCheck."
inputs:
  additional_files:
    description: "This input contains a space separated list of additional filename to check"
    required: false
    default: ""
  ignore:
    description: "This input contains the paths to ignore when running shellcheck"
    required: false
    default: ""
  ignore_paths:
    description: "This input contains the paths to ignore when running shellcheck"
    required: false
    default: ""
  ignore_names:
    description: "This input contains the names to ignore when running shellcheck"
    required: false
    default: ""
  severity:
    description: "This input contains the minimum severity of errors to consider. Options: [error, warning, info, style]"
    required: false
    default: "error"
  check_together:
    description: "This input controls the run shellcheck on _all_ files at once, instead of one at a time"
    required: false
    default: ""
  scandir:
    description: "This input contains the directory to be searched for files. Defaults to ."
    required: false
    default: "."
  format:
    description: "This input contains the output format (checkstyle, diff, gcc, json, json1, quiet, tty)"
    required: false
    default: "checkstyle"
  version:
    description: "This input contains the shellcheck version to install"
    required: false
    default: "stable"
outputs:
  files:
    description: This output contains a list of files with issues
    value: ${{ steps.filepaths.outputs.filepaths }}
  options:
    description: This output contains the options used
    value: ${{ steps.options.outputs.options }}
branding:
  icon: "terminal"
  color: "blue"
runs:
  using: "composite"
  steps:
    - name: Download ShellCheck
      shell: bash
      run: |
        download_url="https://github.com/koalaman/shellcheck/releases/download/${{ inputs.version }}/shellcheck-${{ inputs.version }}.linux.x86_64.tar.xz"
        curl -Lso "${{ github.action_path }}/sc.tar.xz" "$download_url"
        tar -xf "${{ github.action_path }}/sc.tar.xz" -C "${{ github.action_path }}"
        mv "${{ github.action_path }}/shellcheck-${{ inputs.version }}/shellcheck" "${{ github.action_path }}/shellcheck"
          
    - name: Display ShellCheck Version
      shell: bash
      run: |
        "${{ github.action_path }}/shellcheck" --version

    - name: Set Options
      shell: bash
      id: options
      run: |
        declare -a options
        if [[ -n "${{ inputs.severity }}" ]]; then
          options+=("-S ${{ inputs.severity }}")
        fi
        options+=("--format=${{ inputs.format }}")
        echo "::set-output name=options::${options[@]}"

    - name: Gather Excluded Paths
      shell: bash
      id: exclude
      run: |
        declare -a excludes
        excludes+=("! -path \"*./.git/*\"")
        excludes+=("! -path \"*.go\"")
        excludes+=("! -path \"*/mvnw\"")
        if [[ -n "${{ inputs.ignore }}" ]]; then
          echo "::warning::ignore is deprecated. Please use ignore_paths instead"
          for path in ${{ inputs.ignore }}; do
            echo "::debug:: Adding "$path" to excludes"
            excludes+=("! -path \"*./$path/*\"")
            excludes+=("! -path \"*/$path/*\"")
          done
        else
          for path in ${{ inputs.ignore_paths }}; do
            echo "::debug:: Adding "$path" to excludes"
            excludes+=("! -path \"*./$path/*\"")
            excludes+=("! -path \"*/$path/*\"")
          done
        fi

        for name in ${{ inputs.ignore_names }}; do
          echo "::debug:: Adding "$name" to excludes"
          excludes+=("! -name $name")
        done
        echo "::set-output name=excludes::${excludes[@]}"

    - name: Gather Base File Paths
      shell: bash
      id: filepaths
      run: |
        declare -a filepaths
        shebangregex="^#! */[^ ]*/(env *)?[abk]*sh"

        for path in $(find "${{ inputs.scandir }}" \
            -type f -type f ${{ steps.exclude.outputs.excludes }} \
            '(' \
            -name '*.bash' \
            -o -name '.bashrc' \
            -o -name 'bashrc' \
            -o -name '.bash_aliases' \
            -o -name '.bash_completion' \
            -o -name '.bash_login' \
            -o -name '.bash_logout' \
            -o -name '.bash_profile' \
            -o -name 'bash_profile' \
            -o -name '*.ksh' \
            -o -name 'suid_profile' \
            -o -name '*.zsh' \
            -o -name '.zlogin' \
            -o -name 'zlogin' \
            -o -name '.zlogout' \
            -o -name 'zlogout' \
            -o -name '.zprofile' \
            -o -name 'zprofile' \
            -o -name '.zsenv' \
            -o -name 'zsenv' \
            -o -name '.zshrc' \
            -o -name 'zshrc' \
            -o -name '*.sh' \
            -o -path '*/.profile' \
            -o -path '*/profile' \
            -o -name '*.shlib' \
            ${{ steps.additional.outputs.files }} \
              ')'\
            -print); do
          filepaths+=("$path");
        done

        for file in $(find "${{ inputs.scandir }}" ${{ steps.exclude.outputs.excludes }} -type f ! -name '*.*' -perm /111  -print); do
          head -n1 "$file" | grep -Eqs "$shebangregex" || continue
          filepaths+=("$file");
        done
        echo "::set-output name=filepaths::${filepaths[@]}"

    - name: Run The File Check
      id: check
      shell: bash
      run: |
        statuscode=0

        if [[ -n "${{ inputs.check_together }}" ]]; then
           "${{ github.action_path }}/shellcheck" \
           ${{ steps.options.outputs.options }} \
           ${{ steps.filepaths.outputs.filepaths }} || statuscode=$?
        else
          for file in ${{ steps.filepaths.outputs.filepaths }}; do
            echo "::debug::Checking $file"
            "${{ github.action_path }}/shellcheck" \
            ${{ steps.options.outputs.options }} \
            "$file" || statuscode=$?;
          done
        fi

        echo "::set-output name=statuscode::$statuscode"

    - name: Print information
      shell: bash
      run: |
        echo "Files: ${{steps.filepaths.outputs.filepaths}}"
        echo "Excluded: ${{ steps.exclude.outputs.excludes }}"
        echo "Options: ${{ steps.options.outputs.options }}"
        echo "Status code: ${{steps.check.outputs.statuscode}}"

        exit ${{steps.check.outputs.statuscode}}
